// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ URL (–æ—Ç OAuth –∏–ª–∏ Magic Link)
const urlParams = new URLSearchParams(window.location.search);
const token = urlParams.get('token');
const error = urlParams.get('error');

if (token) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    localStorage.setItem('authToken', token);
    window.location.href = '/';
}

if (error) {
    let errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
    switch(error) {
        case 'oauth_failed':
            errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ OAuth. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –≤—Ö–æ–¥–∞.';
            break;
        case 'no_user':
            errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            break;
        case 'not_configured':
            errorMessage = 'OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Email/Password/Magic Link –¥–ª—è –≤—Ö–æ–¥–∞.';
            break;
        default:
            const decodedError = decodeURIComponent(error);
            if (decodedError.includes('–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω') || decodedError.includes('not configured')) {
                errorMessage = 'OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Email/Password –∏–ª–∏ Magic Link –¥–ª—è –≤—Ö–æ–¥–∞. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OAuth —Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —Ñ–∞–π–ª–µ OAUTH_QUICK_SETUP.md';
            } else {
                errorMessage = decodedError || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
            }
    }
    showError(errorMessage);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ OAuth –∫–Ω–æ–ø–∫–∞–º
document.querySelectorAll('.oauth-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ - –µ—Å–ª–∏ OAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –æ—à–∏–±–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å –æ—à–∏–±–∫–æ–π
    });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        const tabName = btn.dataset.tab;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.auth-form').forEach(f => f.classList.remove('active'));
        
        btn.classList.add('active');
        document.getElementById(`${tabName}-form`).classList.add('active');
    });
});

// –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    const twoFactorToken = document.getElementById('login2FAToken').value;
    
    try {
        const response = await fetch('/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password, twoFactorToken })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            if (data.requires2FA) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è 2FA
                document.getElementById('login2FA').style.display = 'block';
                showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞', 'info');
                return;
            }
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        localStorage.setItem('authToken', data.token);
        window.location.href = '/';
    } catch (error) {
        showError(error.message);
    }
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
let registrationData = null;

// –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email
document.getElementById('registerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = document.getElementById('registerEmail').value;
    const username = document.getElementById('registerUsername').value;
    const password = document.getElementById('registerPassword').value;
    const passwordConfirm = document.getElementById('registerPasswordConfirm').value;
    
    if (password !== passwordConfirm) {
        showError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return;
    }
    
    if (password.length < 6) {
        showError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    registrationData = { email, username, password };
    
    const btn = document.getElementById('registerSubmitBtn');
    const originalText = btn.textContent;
    btn.disabled = true;
    btn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    try {
        const response = await fetch('/auth/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, username, password }),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞';
            try {
                const errorData = await response.json();
                errorMessage = errorData.error || errorData.message || errorMessage;
                
                // –ï—Å–ª–∏ SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                if (errorData.development && errorData.development.verificationCode) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
                    const verificationCodeSection = document.getElementById('verificationCodeSection');
                    const devCodeDisplay = document.getElementById('devCodeDisplay');
                    const devCode = document.getElementById('devCode');
                    const registerForm = document.getElementById('registerForm');
                    
                    if (verificationCodeSection) {
                        verificationCodeSection.style.display = 'block';
                    }
                    if (devCodeDisplay) {
                        devCodeDisplay.style.setProperty('display', 'block', 'important');
                        devCodeDisplay.style.setProperty('visibility', 'visible', 'important');
                        devCodeDisplay.style.setProperty('opacity', '1', 'important');
                    }
                    if (devCode) {
                        devCode.textContent = errorData.development.verificationCode;
                        devCode.style.setProperty('color', '#856404', 'important');
                        
                        devCode.style.setProperty('font-size', '18px', 'important');
                        devCode.style.setProperty('font-weight', 'bold', 'important');
                    }
                    if (registerForm) {
                        registerForm.style.display = 'none';
                    }
                    
                    showMessage(errorData.development.message || 'SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –∫–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'info');
                    return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—è –æ—à–∏–±–∫—É
                }
            } catch (parseError) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                const text = await response.text();
                errorMessage = text || errorMessage;
            }
            throw new Error(errorMessage);
        }
        
        const data = await response.json();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üìß –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        console.log('üìß Development –∫–æ–¥:', data.development);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        const verificationCodeSection = document.getElementById('verificationCodeSection');
        if (verificationCodeSection) {
            verificationCodeSection.style.display = 'block';
            console.log('‚úÖ verificationCodeSection –ø–æ–∫–∞–∑–∞–Ω');
        } else {
            console.error('‚ùå verificationCodeSection –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (data.development && data.development.verificationCode) {
            console.log('‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω:', data.development.verificationCode);
            const devCodeDisplay = document.getElementById('devCodeDisplay');
            const devCode = document.getElementById('devCode');
            
            if (devCodeDisplay) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å !important
                devCodeDisplay.style.setProperty('display', 'block', 'important');
                devCodeDisplay.style.setProperty('visibility', 'visible', 'important');
                devCodeDisplay.style.setProperty('opacity', '1', 'important');
                devCodeDisplay.style.setProperty('height', 'auto', 'important');
                devCodeDisplay.style.setProperty('width', 'auto', 'important');
                devCodeDisplay.style.setProperty('min-height', '40px', 'important');
                devCodeDisplay.style.setProperty('position', 'relative', 'important');
                devCodeDisplay.style.setProperty('z-index', '9999', 'important');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                let parent = devCodeDisplay.parentElement;
                let level = 0;
                while (parent && level < 5) {
                    const parentStyles = window.getComputedStyle(parent);
                    console.log(`‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç —É—Ä–æ–≤–µ–Ω—å ${level}:`, {
                        tag: parent.tagName,
                        id: parent.id,
                        class: parent.className,
                        display: parentStyles.display,
                        visibility: parentStyles.visibility,
                        opacity: parentStyles.opacity,
                        height: parentStyles.height
                    });
                    
                    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤–∏–¥–∏–º—ã
                    if (parentStyles.display === 'none') {
                        parent.style.setProperty('display', 'block', 'important');
                    }
                    parent = parent.parentElement;
                    level++;
                }
                
                console.log('‚úÖ devCodeDisplay –ø–æ–∫–∞–∑–∞–Ω');
                const computedStyles = window.getComputedStyle(devCodeDisplay);
                console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π devCodeDisplay:', {
                    display: computedStyles.display,
                    visibility: computedStyles.visibility,
                    opacity: computedStyles.opacity,
                    height: computedStyles.height,
                    width: computedStyles.width,
                    position: computedStyles.position,
                    zIndex: computedStyles.zIndex,
                    backgroundColor: computedStyles.backgroundColor,
                    padding: computedStyles.padding,
                    margin: computedStyles.margin
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ DOM
                console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM:', {
                    offsetHeight: devCodeDisplay.offsetHeight,
                    offsetWidth: devCodeDisplay.offsetWidth,
                    clientHeight: devCodeDisplay.clientHeight,
                    clientWidth: devCodeDisplay.clientWidth,
                    scrollHeight: devCodeDisplay.scrollHeight,
                    scrollWidth: devCodeDisplay.scrollWidth
                });
            } else {
                console.error('‚ùå devCodeDisplay –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
            
            if (devCode) {
                devCode.textContent = data.development.verificationCode;
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–¥ –≤–∏–¥–µ–Ω
                devCode.style.setProperty('color', '#856404', 'important');
                devCode.style.setProperty('font-size', '18px', 'important');
                devCode.style.setProperty('font-weight', 'bold', 'important');
                console.log('‚úÖ devCode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', data.development.verificationCode);
                console.log('‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', devCode.textContent);
                console.log('‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–Ω?', devCodeDisplay ? window.getComputedStyle(devCodeDisplay).display !== 'none' : 'N/A');
            } else {
                console.error('‚ùå devCode –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.development.message) {
                showMessage(data.development.message, 'info');
            } else {
                showMessage('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email!', 'success');
            }
        } else {
            console.warn('‚ö†Ô∏è –ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ!');
            console.warn('data.development:', data.development);
            showMessage('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email!', 'success');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registerForm = document.getElementById('registerForm');
        if (registerForm) {
            registerForm.style.display = 'none';
        }
    } catch (error) {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
            showError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
        } else {
            showError(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞');
        }
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    } finally {
        btn.disabled = false;
        btn.textContent = originalText;
    }
});

// –§–æ—Ä–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
document.getElementById('verifyEmailForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!registrationData) {
        showError('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const code = document.getElementById('verificationCode').value;
    
    if (!code || code.length !== 6) {
        showError('–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        return;
    }
    
    const btn = e.target.querySelector('button[type="submit"]');
    const originalText = btn.textContent;
    btn.disabled = true;
    btn.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...';
    
    try {
        const response = await fetch('/auth/verify-email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: registrationData.email, code })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        localStorage.setItem('authToken', data.token);
        showMessage('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 1000);
    } catch (error) {
        showError(error.message);
    } finally {
        btn.disabled = false;
        btn.textContent = originalText;
    }
});

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
document.getElementById('resendCodeBtn').addEventListener('click', async () => {
    if (!registrationData) {
        showError('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const btn = document.getElementById('resendCodeBtn');
    const originalText = btn.textContent;
    btn.disabled = true;
    btn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000);
    
    try {
        const response = await fetch('/auth/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(registrationData),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞';
            try {
                const errorData = await response.json();
                errorMessage = errorData.error || errorData.message || errorMessage;
                
                // –ï—Å–ª–∏ SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                if (errorData.development && errorData.development.verificationCode) {
                    const devCodeDisplay = document.getElementById('devCodeDisplay');
                    const devCode = document.getElementById('devCode');
                    if (devCodeDisplay) {
                        devCodeDisplay.style.setProperty('display', 'block', 'important');
                        devCodeDisplay.style.setProperty('visibility', 'visible', 'important');
                        devCodeDisplay.style.setProperty('opacity', '1', 'important');
                    }
                    if (devCode) {
                        devCode.textContent = errorData.development.verificationCode;
                        devCode.style.setProperty('color', '#856404', 'important');
                        devCode.style.setProperty('font-size', '18px', 'important');
                        devCode.style.setProperty('font-weight', 'bold', 'important');
                    }
                    showMessage(errorData.development.message || 'SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –∫–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'info');
                    return;
                }
            } catch (parseError) {
                const text = await response.text();
                errorMessage = text || errorMessage;
            }
            throw new Error(errorMessage);
        }
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (data.development && data.development.verificationCode) {
            const devCodeDisplay = document.getElementById('devCodeDisplay');
            const devCode = document.getElementById('devCode');
            if (devCodeDisplay) {
                devCodeDisplay.style.setProperty('display', 'block', 'important');
                devCodeDisplay.style.setProperty('visibility', 'visible', 'important');
                devCodeDisplay.style.setProperty('opacity', '1', 'important');
            }
            if (devCode) {
                devCode.textContent = data.development.verificationCode;
                devCode.style.setProperty('color', '#856404', 'important');
                devCode.style.setProperty('font-size', '18px', 'important');
                devCode.style.setProperty('font-weight', 'bold', 'important');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ development, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.development.message) {
                showMessage(data.development.message, 'info');
            }
        }
        
        showMessage('–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email!', 'success');
    } catch (error) {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
            showError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
        } else {
            showError(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞');
        }
        console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);
    } finally {
        btn.disabled = false;
        btn.textContent = originalText;
    }
});

// Magic Link —Ñ–æ—Ä–º–∞
document.getElementById('magicLinkForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = document.getElementById('magicEmail').value;
    const btn = e.target.querySelector('button[type="submit"]');
    const originalText = btn.textContent;
    
    btn.disabled = true;
    btn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    try {
        const response = await fetch('/auth/magic-link', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Magic Link');
        }
        
        const resultDiv = document.getElementById('magicLinkResult');
        const urlDiv = document.getElementById('magicLinkUrl');
        
        resultDiv.style.display = 'block';
        
        if (data.development && data.development.magicLinkUrl) {
            urlDiv.textContent = data.development.magicLinkUrl;
            urlDiv.innerHTML = `<a href="${data.development.magicLinkUrl}" target="_blank">${data.development.magicLinkUrl}</a>`;
        } else {
            urlDiv.textContent = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É';
        }
        
        showMessage('Magic Link –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É!', 'success');
    } catch (error) {
        showError(error.message);
    } finally {
        btn.disabled = false;
        btn.textContent = originalText;
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function showError(message) {
    const existing = document.querySelector('.error-message');
    if (existing) {
        existing.remove();
    }
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    
    const activeForm = document.querySelector('.auth-form.active');
    activeForm.insertBefore(errorDiv, activeForm.firstChild);
    
    setTimeout(() => {
        errorDiv.remove();
    }, 5000);
}

function showMessage(message, type = 'success') {
    const existing = document.querySelector(`.${type}-message`);
    if (existing) {
        existing.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `${type}-message`;
    messageDiv.textContent = message;
    
    const activeForm = document.querySelector('.auth-form.active');
    activeForm.insertBefore(messageDiv, activeForm.firstChild);
    
    setTimeout(() => {
        messageDiv.remove();
    }, 5000);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async function checkAuth() {
    const token = localStorage.getItem('authToken');
    if (!token) {
        return false;
    }
    
    try {
        const response = await fetch('/auth/verify', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        return data.success;
    } catch {
        localStorage.removeItem('authToken');
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–Ω–æ –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–º–∏)
async function checkOAuthProviders() {
    const providers = ['google', 'github'];
    
    for (const provider of providers) {
        const btn = document.querySelector(`.oauth-btn.${provider}`);
        if (!btn) continue;
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞
        btn.style.display = '';
        
        // –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å, –Ω–æ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try {
            const response = await fetch(`/auth/${provider}`, { 
                method: 'GET',
                redirect: 'manual'
            });
        
            if (response.status === 503) {
                console.log(`${provider} OAuth not configured (button remains visible)`);
            } else if (response.status === 302 || response.status === 307 || response.status === 308) {
                console.log(`${provider} OAuth is configured`);
            }
        } catch (error) {
            console.log(`Could not check ${provider} OAuth status:`, error.message);
        }
    }
}

// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ OAuth –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∏–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function ensureOAuthButtonsVisible() {
    document.querySelectorAll('.oauth-btn').forEach(btn => {
        btn.style.display = 'flex';
        btn.style.visibility = 'visible';
        btn.style.opacity = '1';
    });
    const oauthContainer = document.querySelector('.oauth-buttons');
    if (oauthContainer) {
        oauthContainer.style.display = 'flex';
        oauthContainer.style.visibility = 'visible';
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
ensureOAuthButtonsVisible();

// –ò –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    ensureOAuthButtonsVisible();
});

// –ò —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
setTimeout(ensureOAuthButtonsVisible, 50);
setTimeout(ensureOAuthButtonsVisible, 200);
setTimeout(ensureOAuthButtonsVisible, 500);

// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
checkAuth().then(isAuth => {
    if (isAuth) {
        window.location.href = '/';
    } else {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        ensureOAuthButtonsVisible();
        setTimeout(() => {
            ensureOAuthButtonsVisible();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–æ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º)
            checkOAuthProviders();
        }, 100);
    }
});


