const express = require('express');
const router = express.Router();
const passport = require('./passport-config');
const authModule = require('./auth');
const {
  registerUser,
  loginUser,
  generateToken,
  verifyToken,
  createMagicLink,
  verifyMagicLink,
  enable2FA,
  verify2FA,
  require2FA,
  getUserById,
  createEmailVerificationCode,
  verifyEmailCode
} = authModule;

// –ü–æ–ª—É—á–∞–µ–º readUsers –∏–∑ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const { readUsers } = authModule;
const nodemailer = require('nodemailer');
const https = require('https');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nodemailer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã (Gmail App Password –æ–±—ã—á–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
const smtpPass = process.env.SMTP_PASS ? process.env.SMTP_PASS.replace(/\s+/g, '') : '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
function createTransporter(port, secure) {
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST || 'smtp.gmail.com',
    port: port,
    secure: secure, // true –¥–ª—è 465, false –¥–ª—è 587
    auth: {
      user: process.env.SMTP_USER || '',
      pass: smtpPass
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    tls: {
      rejectUnauthorized: false // –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    },
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è Render)
    connectionTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    greetingTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    socketTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    pool: false, // –æ—Ç–∫–ª—é—á–∞–µ–º –ø—É–ª –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    requireTLS: !secure // —Ç—Ä–µ–±–æ–≤–∞—Ç—å TLS –¥–ª—è –ø–æ—Ä—Ç–∞ 587
  });
}

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä —Å –ø–æ—Ä—Ç–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±—É–µ–º –æ–±–∞ –ø–æ—Ä—Ç–∞
const smtpPort = parseInt(process.env.SMTP_PORT || '465'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 465 (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –Ω–∞ Render)
const smtpSecure = process.env.SMTP_SECURE === 'true' || smtpPort === 465;

let transporter = createTransporter(smtpPort, smtpSecure);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
function switchTransporterPort() {
  const currentPort = transporter.options.port;
  const currentSecure = transporter.options.secure;
  
  if (currentPort === 465 && !currentSecure) {
    // –ï—Å–ª–∏ –±—ã–ª 465, –ø—Ä–æ–±—É–µ–º 587
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç 587 —Å STARTTLS...');
    transporter = createTransporter(587, false);
  } else if (currentPort === 587 && !currentSecure) {
    // –ï—Å–ª–∏ –±—ã–ª 587, –ø—Ä–æ–±—É–µ–º 465
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç 465 —Å SSL...');
    transporter = createTransporter(465, true);
  } else {
    // –ï—Å–ª–∏ secure —É–∂–µ true, –ø—Ä–æ–±—É–µ–º 587
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç 587 —Å STARTTLS...');
    transporter = createTransporter(587, false);
  }
  
  console.log(`üìß –ù–æ–≤—ã–µ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: port=${transporter.options.port}, secure=${transporter.options.secure}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ)
// –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä Render) –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if (process.env.SMTP_USER && smtpPass) {
  console.log('üìß SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
    host: process.env.SMTP_HOST || 'smtp.gmail.com',
    port: smtpPort,
    secure: smtpSecure,
    user: process.env.SMTP_USER,
    passLength: smtpPass.length,
    passPreview: smtpPass ? `${smtpPass.substring(0, 4)}...${smtpPass.substring(smtpPass.length - 4)}` : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
  });
  console.log('‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ)');
  console.log('‚ÑπÔ∏è  –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö');
} else {
  console.warn('‚ö†Ô∏è  SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: SMTP_USER –∏–ª–∏ SMTP_PASS –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  console.warn('–î–ª—è —Ä–∞–±–æ—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SMTP');
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
router.post('/register', async (req, res) => {
  try {
    const { email, password, username } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const users = await readUsers();
    const existingUser = users.find(u => u.email === email);
    if (existingUser) {
      return res.status(400).json({ error: 'User with this email already exists' });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const code = await createEmailVerificationCode(email, password, username);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!process.env.SMTP_USER || !smtpPass) {
      console.error('SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: SMTP_USER –∏–ª–∏ SMTP_PASS –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ —Å—Ä–∞–∑—É (–Ω–µ –∂–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ email)
      return res.json({
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–∞–∂–µ –µ—Å–ª–∏ SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        development: { 
          verificationCode: code,
          message: 'SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –∫–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
        }
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º (–ø—ã—Ç–∞–µ–º—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
    console.log(`üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ ${email}...`);
    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${process.env.SMTP_USER}`);
    console.log(`üìß SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: host=${process.env.SMTP_HOST}, port=${process.env.SMTP_PORT}, secure=${process.env.SMTP_SECURE}`);
    
    let emailSent = false;
    let emailError = null;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Resend API (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω) - –æ–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Ä—Ç–æ–≤ –Ω–∞ Render
    if (process.env.RESEND_API_KEY) {
      try {
        console.log('üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —á–µ—Ä–µ–∑ Resend API...');
        
        // –î–ª—è Resend –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π email –µ—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        // Gmail –∞–¥—Ä–µ—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
        // –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ Resend —Ç–µ—Å—Ç–æ–≤—ã–µ emails –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        let fromEmail = 'onboarding@resend.dev'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤—ã–π email
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ SMTP_USER Gmail –∞–¥—Ä–µ—Å–æ–º
        if (process.env.SMTP_USER && !process.env.SMTP_USER.includes('@gmail.com') && !process.env.SMTP_USER.includes('@resend.dev')) {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Gmail –∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π Resend email, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
          fromEmail = process.env.SMTP_USER;
        }
        
        // –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ Resend: —Ç–µ—Å—Ç–æ–≤—ã–µ emails –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ email —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å
        const resendRegisteredEmail = process.env.RESEND_REGISTERED_EMAIL || 'p.h.4@mail.ru';
        if (fromEmail === 'onboarding@resend.dev' && email !== resendRegisteredEmail) {
          console.warn(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Resend –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ emails —Ç–æ–ª—å–∫–æ –Ω–∞ ${resendRegisteredEmail}`);
          console.warn(`‚ö†Ô∏è –ü–∏—Å—å–º–æ –º–æ–∂–µ—Ç –Ω–µ –¥–æ–π—Ç–∏ –¥–æ ${email}. –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ª—é–±–æ–π –∞–¥—Ä–µ—Å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –¥–æ–º–µ–Ω –≤ Resend.`);
        }
        
        const postData = JSON.stringify({
          from: `ChatApp <${fromEmail}>`,
          to: email,
          subject: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - ChatApp',
          html: `
            <h2>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
            <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
            <h1 style="color: #4CAF50; font-size: 32px; text-align: center; letter-spacing: 5px;">${code}</h1>
            <p>–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</p>
            <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
          `
        });
        
        const options = {
          hostname: 'api.resend.com',
          port: 443,
          path: '/emails',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.RESEND_API_KEY}`,
            'Content-Length': Buffer.byteLength(postData)
          },
          timeout: 30000
        };
        
        await new Promise((resolve, reject) => {
          const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => { data += chunk; });
            res.on('end', () => {
              if (res.statusCode === 200) {
                const result = JSON.parse(data);
                emailSent = true;
                console.log(`‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Resend –Ω–∞ ${email}`);
                console.log(`   Message ID: ${result.id || 'N/A'}`);
                resolve(result);
              } else {
                reject(new Error(`Resend API error: ${res.statusCode} - ${data}`));
              }
            });
          });
          
          req.on('error', reject);
          req.on('timeout', () => {
            req.destroy();
            reject(new Error('Resend API timeout'));
          });
          
          req.write(postData);
          req.end();
        });
      } catch (resendError) {
        console.warn('‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Resend –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º SMTP...');
        console.warn('   –û—à–∏–±–∫–∞:', resendError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º SMTP
      }
    }
    
    // –ï—Å–ª–∏ Resend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π SMTP
    if (!emailSent) {
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–æ–≤
    const sendEmailWithRetry = async (retries = 3) => {
      let lastError = null;
      
      for (let attempt = 1; attempt <= retries; attempt++) {
        try {
          console.log(`üìß –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∏–∑ ${retries} –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ ${email}...`);
          console.log(`üìß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç ${transporter.options.port}, secure=${transporter.options.secure}`);
          
          const mailInfo = await transporter.sendMail({
            from: process.env.SMTP_USER,
            to: email,
            subject: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - ChatApp',
            html: `
              <h2>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
              <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
              <h1 style="color: #4CAF50; font-size: 32px; text-align: center; letter-spacing: 5px;">${code}</h1>
              <p>–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</p>
              <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</p>
              <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            `
          });
          return mailInfo;
        } catch (err) {
          lastError = err;
          console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err.message);
          console.error(`   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${err.code}`);
          console.error(`   –ö–æ–º–∞–Ω–¥–∞: ${err.command || 'N/A'}`);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç
          if (attempt < retries && (err.code === 'ETIMEDOUT' || err.code === 'ECONNREFUSED' || err.message.includes('timeout'))) {
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç...');
            switchTransporterPort();
            
            const delay = attempt * 2000; // 2, 4, 6 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}–º—Å —Å –Ω–æ–≤—ã–º –ø–æ—Ä—Ç–æ–º...`);
            await new Promise(resolve => setTimeout(resolve, delay));
          } else if (attempt < retries) {
            const delay = attempt * 2000;
            console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
      throw lastError;
    };
    
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const sendEmailWithTimeout = Promise.race([
      sendEmailWithRetry(3), // 3 –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–æ–≤)
      new Promise((_, reject) => {
        setTimeout(() => {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email (45 —Å–µ–∫—É–Ω–¥)'));
        }, 45000); // 45 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 15)
      })
    ]).then((mailInfo) => {
      emailSent = true;
      console.log(`‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
      console.log(`   Message ID: ${mailInfo.messageId}`);
      console.log(`   Response: ${mailInfo.response || 'OK'}`);
      return mailInfo;
    }).catch((err) => {
      emailError = err;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ ${email}:`, err);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: err.message,
        code: err.code,
        command: err.command,
        response: err.response,
        responseCode: err.responseCode,
        stack: err.stack
      });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Gmail
      if (err.responseCode === 535 || err.code === 'EAUTH') {
        console.error('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π Gmail:');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å App Password');
        console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 2FA –≤–∫–ª—é—á–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ');
        console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ App Password —Å–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      }
      
      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ - –∫–æ–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω–µ–º
      return null;
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥)
    try {
      await Promise.race([
        sendEmailWithTimeout,
        new Promise((resolve) => setTimeout(resolve, 10000)) // –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –∂–¥–µ–º (–±—ã–ª–æ 5)
      ]);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –∫–æ–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω–µ–º
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      console.warn('–ü—Ä–∏—á–∏–Ω–∞:', e.message);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç SMTP, –≤–æ–∑–º–æ–∂–Ω–æ Render –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—ã
      if (e.message.includes('timeout') || e.message.includes('Connection timeout')) {
        console.error('‚ùå –í–ù–ò–ú–ê–ù–ò–ï: Render –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ—Ä—Ç—ã 465, 587)!');
        console.error('üí° –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Resend API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ 100 –ø–∏—Å–µ–º/–¥–µ–Ω—å)');
        console.error('   1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://resend.com');
        console.error('   2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ API Keys');
        console.error('   3. –î–æ–±–∞–≤—å—Ç–µ RESEND_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render');
        console.error('   4. Resend API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS (–ø–æ—Ä—Ç 443), –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è Render');
      }
    }
    } // –∫–æ–Ω–µ—Ü if (!emailSent)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º
    // –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤ development –ø–æ–ª–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let emailStatusMessage = '–ö–æ–¥ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ.';
    
    if (emailError) {
      emailStatusMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: ${emailError.message}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ.`;
    } else if (!emailSent) {
      emailStatusMessage = '–û—Ç–ø—Ä–∞–≤–∫–∞ email –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ.';
    }
    
    const responseData = {
      success: true,
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
      // –ö–æ–¥ –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      development: { 
        verificationCode: code,
        message: emailStatusMessage,
        emailSent: emailSent,
        emailError: emailError ? emailError.message : null
      }
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:', JSON.stringify({
      success: responseData.success,
      message: responseData.message,
      hasDevelopment: !!responseData.development,
      hasCode: !!responseData.development.verificationCode,
      code: responseData.development.verificationCode
    }));
    
    res.json(responseData);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/verify-email', async (req, res) => {
  try {
    const { email, code } = req.body;
    
    if (!email || !code) {
      return res.status(400).json({ error: 'Email and code are required' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const userData = await verifyEmailCode(email, code);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await registerUser(userData.email, userData.password, userData.username);
    const token = generateToken(user);
    
    res.json({
      success: true,
      message: 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
      token,
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        twoFactorEnabled: user.twoFactorEnabled
      }
    });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// –í—Ö–æ–¥ –ø–æ email/–ø–∞—Ä–æ–ª—å
router.post('/login', async (req, res) => {
  try {
    const { email, password, twoFactorToken } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }
    
    const user = await loginUser(email, password);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA
    const needs2FA = await require2FA(user.id);
    if (needs2FA) {
      if (!twoFactorToken) {
        return res.status(200).json({
          success: false,
          requires2FA: true,
          message: '2FA token required'
        });
      }
      
      const isValid2FA = await verify2FA(user.id, twoFactorToken);
      if (!isValid2FA) {
        return res.status(401).json({ error: 'Invalid 2FA token' });
      }
    }
    
    const token = generateToken(user);
    
    res.json({
      success: true,
      token,
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        twoFactorEnabled: user.twoFactorEnabled
      }
    });
  } catch (error) {
    res.status(401).json({ error: error.message });
  }
});

// Magic Link - –∑–∞–ø—Ä–æ—Å
router.post('/magic-link', async (req, res) => {
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email is required' });
    }
    
    const token = await createMagicLink(email);
    const magicLinkUrl = `${req.protocol}://${req.get('host')}/auth/verify-magic-link?token=${token}`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å magic link
    if (process.env.SMTP_USER && process.env.SMTP_PASS) {
      await transporter.sendMail({
        from: process.env.SMTP_USER,
        to: email,
        subject: 'Your Magic Link - ChatApp',
        html: `
          <h2>Your Magic Link</h2>
          <p>Click the link below to login:</p>
          <a href="${magicLinkUrl}">${magicLinkUrl}</a>
          <p>This link will expire in 15 minutes.</p>
        `
      });
    }
    
    res.json({
      success: true,
      message: 'Magic link sent to your email',
      // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–±—Ä–∞—Ç—å!)
      development: process.env.NODE_ENV !== 'production' ? { magicLinkUrl } : undefined
    });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Magic Link - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
router.get('/verify-magic-link', async (req, res) => {
  try {
    const { token } = req.query;
    
    if (!token) {
      return res.redirect('/?error=invalid_token');
    }
    
    const user = await verifyMagicLink(token);
    const jwtToken = generateToken(user);
    
    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å —Ç–æ–∫–µ–Ω–æ–º
    res.redirect(`/?token=${jwtToken}`);
  } catch (error) {
    res.redirect(`/?error=${encodeURIComponent(error.message)}`);
  }
});

// –í–∫–ª—é—á–µ–Ω–∏–µ 2FA
router.post('/2fa/enable', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    const token = authHeader.substring(7);
    const decoded = verifyToken(token);
    if (!decoded) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    
    const { secret, qrCodeUrl } = await enable2FA(decoded.userId);
    
    res.json({
      success: true,
      secret,
      qrCodeUrl
    });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è 2FA –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
router.post('/2fa/verify', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    const token = authHeader.substring(7);
    const decoded = verifyToken(token);
    if (!decoded) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    
    const { twoFactorToken } = req.body;
    if (!twoFactorToken) {
      return res.status(400).json({ error: '2FA token is required' });
    }
    
    const isValid = await verify2FA(decoded.userId, twoFactorToken);
    
    if (isValid) {
      res.json({ success: true, message: '2FA enabled successfully' });
    } else {
      res.status(401).json({ error: 'Invalid 2FA token' });
    }
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// OAuth –º–∞—Ä—à—Ä—É—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {
  router.get('/google', passport.authenticate('google', { scope: ['profile', 'email'] }));
  router.get('/google/callback', 
    passport.authenticate('google', { session: false, failureRedirect: '/auth.html?error=oauth_failed' }), 
    (req, res) => {
      try {
        if (!req.user) {
          return res.redirect('/auth.html?error=no_user');
        }
        const token = generateToken(req.user);
        res.redirect(`/?token=${token}`);
      } catch (error) {
        console.error('Google OAuth callback error:', error);
        res.redirect('/auth.html?error=' + encodeURIComponent(error.message));
      }
    }
  );
} else {
  // –ü—Ä–æ–±—Ä–æ—Å–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  router.get('/google', (req, res) => {
    res.status(503).json({ 
      error: 'Google OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      message: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google OAuth –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CLIENT_ID –∏ GOOGLE_CLIENT_SECRET –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.',
      setupGuide: '/OAUTH_SETUP.md'
    });
  });
}

if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {
  router.get('/github', (req, res, next) => {
    console.log('GitHub OAuth: Initiating authentication');
    passport.authenticate('github', { scope: ['user:email'] })(req, res, next);
  });
  
  router.get('/github/callback',
    (req, res, next) => {
      console.log('GitHub OAuth callback received');
      console.log('Query params:', req.query);
      passport.authenticate('github', { session: false }, (err, user, info) => {
        if (err) {
          console.error('GitHub OAuth authentication error:', err);
          console.error('Error details:', {
            message: err.message,
            stack: err.stack
          });
          return res.redirect('/auth.html?error=' + encodeURIComponent(err.message || 'GitHub authentication failed'));
        }
        
        if (!user) {
          console.error('GitHub OAuth: No user returned');
          console.error('Info:', info);
          let errorMsg = 'Failed to authenticate with GitHub';
          if (info?.message) {
            errorMsg = info.message;
          } else if (info?.error) {
            errorMsg = `GitHub authentication error: ${info.error}`;
          }
          return res.redirect('/auth.html?error=' + encodeURIComponent(errorMsg));
        }
        
        try {
          console.log('GitHub OAuth: User authenticated successfully:', user.id, user.email, user.username);
          const token = generateToken(user);
          console.log('GitHub OAuth: Token generated, redirecting to app');
          res.redirect(`/?token=${token}`);
        } catch (error) {
          console.error('GitHub OAuth callback processing error:', error);
          console.error('Error stack:', error.stack);
          res.redirect('/auth.html?error=' + encodeURIComponent(error.message || 'Failed to process authentication'));
        }
      })(req, res, next);
    }
  );
} else {
  router.get('/github', (req, res) => {
    res.status(503).json({ 
      error: 'GitHub OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      message: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GitHub OAuth –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_CLIENT_ID –∏ GITHUB_CLIENT_SECRET –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.',
      setupGuide: '/OAUTH_SETUP.md'
    });
  });
}

if (process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET) {
  router.get('/facebook', passport.authenticate('facebook', { scope: ['email'] }));
  router.get('/facebook/callback',
    passport.authenticate('facebook', { session: false, failureRedirect: '/auth.html?error=oauth_failed' }),
    (req, res) => {
      try {
        if (!req.user) {
          return res.redirect('/auth.html?error=no_user');
        }
        const token = generateToken(req.user);
        res.redirect(`/?token=${token}`);
      } catch (error) {
        console.error('Facebook OAuth callback error:', error);
        res.redirect('/auth.html?error=' + encodeURIComponent(error.message));
      }
    }
  );
} else {
  router.get('/facebook', (req, res) => {
    res.status(503).json({ 

      error: 'Facebook OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      message: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Facebook OAuth –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è FACEBOOK_APP_ID –∏ FACEBOOK_APP_SECRET –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.',
      setupGuide: '/OAUTH_SETUP.md'
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
router.get('/verify', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    const token = authHeader.substring(7);
    const decoded = verifyToken(token);
    
    if (!decoded) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    
    const user = await getUserById(decoded.userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        twoFactorEnabled: user.twoFactorEnabled
      }
    });
  } catch (error) {
    res.status(401).json({ error: error.message });
  }
});

module.exports = router;

